data_c$post_outpatient_care[index] <- 1
}
if (data_c$id[index] == '525'){
data_c$post_atb_exposure[index] <- 0
data_c$infection_recruitment[index] <- 0
data_c$post_outpatient_care[index] <- 0
}
if (data_c$id[index] == '525.1'){
data_c$shared_bed[index] <- 1
data_c$antibiotics_90days[index] <- 0
data_c$travel_history[index] <- 1
data_c$hospitalization_1year[index] <- 0
}
if (data_c$id[index] == '526'){
data_c$post_atb_exposure[index] <- 0
data_c$infection_recruitment[index] <- 1
data_c$post_outpatient_care[index] <- 1
}
if (data_c$id[index] == '528'){
data_c$post_atb_exposure[index] <- 0
data_c$infection_recruitment[index] <- 0
data_c$post_outpatient_care[index] <- 1
}
if (data_c$id[index] == '528.1'){
data_c$shared_bed[index] <- 0
data_c$antibiotics_90days[index] <- 0
data_c$travel_history[index] <- 1
data_c$hospitalization_1year[index] <- 0
}
if (data_c$id[index] == '1385'){
data_c$post_atb_exposure[index] <- 0
data_c$infection_recruitment[index] <- 0
data_c$post_outpatient_care[index] <- 0
}
if (data_c$id[index] == '1663'){
data_c$post_atb_exposure[index] <- 0
data_c$infection_recruitment[index] <- 0
data_c$post_outpatient_care[index] <- 0
}
if (data_c$id[index] == '1664'){
data_c$post_atb_exposure[index] <- 0
data_c$infection_recruitment[index] <- 0
data_c$post_outpatient_care[index] <- 0
}
if (data_c$id[index] == '1664.1'){
data_c$shared_bed[index] <- 0
data_c$antibiotics_90days[index] <- 0
data_c$travel_history[index] <- 0
data_c$hospitalization_1year[index] <- 0
}
if (data_c$id[index] == '1665'){
data_c$post_atb_exposure[index] <- 0
data_c$infection_recruitment[index] <- 0
data_c$post_outpatient_care[index] <- 0
}
if (data_c$id[index] == '1665.1'){
data_c$shared_bed[index] <- 1
data_c$antibiotics_90days[index] <- 1
data_c$travel_history[index] <- 1
data_c$hospitalization_1year[index] <- 0
}
if (data_c$id[index] == '1667'){
data_c$post_atb_exposure[index] <- 0
data_c$infection_recruitment[index] <- 0
data_c$post_outpatient_care[index] <- 0
}
if (data_c$id[index] == '1674'){
data_c$post_atb_exposure[index] <- 0
data_c$infection_recruitment[index] <- 0
data_c$post_outpatient_care[index] <- 0
}
}
# For the 4-states model, the first culture and first results column's (new baselines) are ignored since it is unknown which specie(s) cause the colnization state
# Check results column
for (index in 1:length(data_c$results)){
if (grepl("E. co", data_c$results[index]) && grepl("KPN", data_c$results[index])){
data_c$state[index] <- 4
next
}
if (grepl("E. co", data_c$results[index])) {
data_c$state[index] <- 2
next
}
if (grepl("E.co", data_c$results[index])) {
data_c$state[index] <- 2
next
}
if (grepl("KPN", data_c$results[index])) {
data_c$state[index] <- 3
next
}
if (grepl("^ND$", data_c$results[index])) {
data_c$state[index] <- 1
next
}
# Maintain current NA's (missing result) + Citrobacter species
else {
data_c$state[index] <- NA
}
}
# Order by patient index
data_c <- data_c[order(data_c$id),]
# CREATE SECOND DF WITHOUT PATIENT 457
data_e <- data_c[!(data_c$id=="457" | data_c$id=="457.1" | data_c$id=="457.2"),]
# CUT OUT TIMES SINCE DISCHARGE
# Frequency table of pairs of consecutive states
states_summary <- statetable.msm(state, id, data=data_e)
Q <- matrix(NA,nrow=4,ncol=4)
# Simple transition matrix (frequency based)
for(i in 1:dim(Q)[1]){
for(j in 1:dim(Q)[2]){
Q[i,j]<-as.matrix(states_summary)[i,j]/sum(as.matrix(states_summary)[i,])
}
}
# States that are not allowed
Q[1,4] <- 0
Q[4,1] <- 0
Q[2,3] <- 0
Q[3,2] <- 0
## Change transition values to the probability of the transmission events (w/o the last state)
## Model with no covariates (4 states)
model_4_s <- msm(formula = state ~ time, subject=id, data=data_e, qmatrix = Q, gen.inits = TRUE)
model_4_s
# An extra state considering Citrobacter could be added or states considering the genes instead species
plot.prevalence.msm(model_4_s, legend.pos=c(5,80), times=seq(1,368,1), timezero = 0)
# Mean sojourn times in each state
sojourn.msm(model_4_s)
totlos.msm(model_4_s, t= 368)
pnext.msm(model_4_s)
data_p <- data_c[!(data_c$id=="502.1" | data_c$id=="504.1" | data_c$id=="504.2" | data_c$id=="504.3" | data_c$id=="506.1" | data_c$id=="507.1" | data_c$id=="507.2" | data_c$id=="509.1" | data_c$id=="509.2"| data_c$id=="511.1" | data_c$id=="511.2" | data_c$id=="525.1" | data_c$id=="528.1" | data_c$id=="1664.1"| data_c$id=="1665.1" | data_c$id=="457.1" | data_c$id=="457.2"),]
states_summary <- statetable.msm(state, id, data=data_p)
Q <- matrix(NA,nrow=4,ncol=4)
# Simple transition matrix (frequency based)
for(i in 1:dim(Q)[1]){
for(j in 1:dim(Q)[2]){
Q[i,j]<-as.matrix(states_summary)[i,j]/sum(as.matrix(states_summary)[i,])
}
}
# States that are not allowed
Q[1,4] <- 0
Q[4,1] <- 0
Q[2,3] <- 0
Q[3,2] <- 0
model_4_p <- msm(formula = state ~ time, subject=id, data=data_p, qmatrix = Q, gen.inits = TRUE)
model_4_p
plot.prevalence.msm(model_4_p, times=368, timezero = 0, legend.pos = c(1,1))
sojourn.msm(model_4_p)
# Re.analyse state 4 with baseline assumming that they got infected with the nearest possible organism in the time serie
data_plasmids <- data_p
for (index in 1:length(data_plasmids$results)){
if (grepl("^ND$", data_plasmids$results[index])){
data_plasmids$state[index] <- 1
next
}
if (grepl("OXA", data_plasmids$results[index])){
data_plasmids$state[index] <- 2
next
}
if (grepl("KPC", data_plasmids$results[index])) {
data_plasmids$state[index] <- 3
next
}
if (grepl("IMP", data_plasmids$results[index])) {
data_plasmids$state[index] <- 4
next
}
if (grepl("NDM", data_plasmids$results[index])) {
data_plasmids$state[index] <- 5
next
}
# Maintain current NA's (missing result)
else {
data_plasmids$state[index] <- NA
}
}
# Order by patient index
data_plasmids <- data_plasmids[order(data_plasmids$id),]
states_summary <- statetable.msm(state, id, data=data_plasmids)
Q <- matrix(NA,nrow=5,ncol=5)
# Simple transition matrix (frequency based)
for(i in 1:dim(Q)[1]){
for(j in 1:dim(Q)[2]){
Q[i,j]<-as.matrix(states_summary)[i,j]/sum(as.matrix(states_summary)[i,])
}
}
model_4_p <- msm(formula = state ~ time, subject=id, data=data_plasmids, qmatrix = Q, gen.inits = TRUE)
model_4_p
model_4_p$estimates
model_4_p$estimates.t
model_4_p$emodel
model_4_p$data
model_4_p$data$mf
vit <- viterbi.msm(model_4_p)
vit
help(msms)
help(msm)
plot.prevalence.msm(model_4_p, legend.pos=c(5,80), times=seq(1,368,1), timezero = 0)
for (index in 1:length(data_plasmids$results)){
if (grepl("^ND$", data_plasmids$results[index])){
data_plasmids$state[index] <- 1
next
}
if (grepl("OXA", data_plasmids$results[index])){
data_plasmids$state[index] <- 2
next
}
if (grepl("KPC", data_plasmids$results[index])) {
data_plasmids$state[index] <- 3
next
}
# Maintain current NA's (missing result)
else {
data_plasmids$state[index] <- NA
}
}
data_plasmids <- data_plasmids[order(data_plasmids$id),]
states_summary <- statetable.msm(state, id, data=data_plasmids)
Q <- matrix(NA,nrow=3,ncol=3)
# Simple transition matrix (frequency based)
for(i in 1:dim(Q)[1]){
for(j in 1:dim(Q)[2]){
Q[i,j]<-as.matrix(states_summary)[i,j]/sum(as.matrix(states_summary)[i,])
}
}
model_4_p <- msm(formula = state ~ time, subject=id, data=data_plasmids, qmatrix = Q, gen.inits = TRUE)
model_4_p
plot.prevalence.msm(model_4_p, legend.pos=c(5,80), times=seq(1,368,1), timezero = 0)
# Frequency table of pairs of consecutive states
states_summary <- statetable.msm(state, id, data=data_e)
Q <- matrix(NA,nrow=4,ncol=4)
states_summary
states_summary <- statetable.msm(state, id, data=data_plasmids)
states_summary
data_plasmids <- data_e
for (index in 1:length(data_plasmids$results)){
if (grepl("^ND$", data_plasmids$results[index])){
data_plasmids$state[index] <- 1
next
}
if (grepl("OXA", data_plasmids$results[index])){
data_plasmids$state[index] <- 2
next
}
if (grepl("KPC", data_plasmids$results[index])) {
data_plasmids$state[index] <- 3
next
}
# Maintain current NA's (missing result)
else {
data_plasmids$state[index] <- NA
}
}
# Order by patient index
data_plasmids <- data_plasmids[order(data_plasmids$id),]
states_summary <- statetable.msm(state, id, data=data_plasmids)
Q <- matrix(NA,nrow=3,ncol=3)
# Simple transition matrix (frequency based)
for(i in 1:dim(Q)[1]){
for(j in 1:dim(Q)[2]){
Q[i,j]<-as.matrix(states_summary)[i,j]/sum(as.matrix(states_summary)[i,])
}
}
model_4_p <- msm(formula = state ~ time, subject=id, data=data_plasmids, qmatrix = Q, gen.inits = TRUE)
model_4_p
plot.prevalence.msm(model_4_p, legend.pos=c(5,80), times=seq(1,368,1), timezero = 0)
data_plasmids <- data_e
for (index in 1:length(data_plasmids$results)){
if (grepl("OXA", data_plasmids$results[index]) && grepl("KPC", data_plasmids$results[index])){
data_plasmids$state[index] <- 4
next
}
if (grepl("^ND$", data_plasmids$results[index])){
data_plasmids$state[index] <- 1
next
}
if (grepl("OXA", data_plasmids$results[index])){
data_plasmids$state[index] <- 2
next
}
if (grepl("KPC", data_plasmids$results[index])) {
data_plasmids$state[index] <- 3
next
}
# Maintain current NA's (missing result)
else {
data_plasmids$state[index] <- NA
}
}
# Order by patient index
data_plasmids <- data_plasmids[order(data_plasmids$id),]
states_summary <- statetable.msm(state, id, data=data_plasmids)
Q <- matrix(NA,nrow=3,ncol=3)
# Simple transition matrix (frequency based)
for(i in 1:dim(Q)[1]){
for(j in 1:dim(Q)[2]){
Q[i,j]<-as.matrix(states_summary)[i,j]/sum(as.matrix(states_summary)[i,])
}
}
model_4_p <- msm(formula = state ~ time, subject=id, data=data_plasmids, qmatrix = Q, gen.inits = TRUE)
model_4_p
plot.prevalence.msm(model_4_p, legend.pos=c(5,80), times=seq(1,368,1), timezero = 0)
states_summary <- statetable.msm(state, id, data=data_plasmids)
states_summary
for (index in 1:length(data_plasmids$results)){
if (grepl("OXA", data_plasmids$results[index]) && grepl("KPC", data_plasmids$results[index])){
data_plasmids$state[index] <- 4
next
}
if (grepl("^ND$", data_plasmids$results[index])){
data_plasmids$state[index] <- 1
next
}
if (grepl("OXA", data_plasmids$results[index])){
data_plasmids$state[index] <- 2
next
}
if (grepl("KPC", data_plasmids$results[index])) {
data_plasmids$state[index] <- 3
next
}
# Maintain current NA's (missing result)
else {
data_plasmids$state[index] <- NA
}
}
data_plasmids$results
for (index in 1:length(data_c$results)){
# if (grepl("E. co", data_c$results[index]) && grepl("KPN", data_c$results[index])){
#   data_c$state[index] <- 4
#   next
# }
if (grepl("E. co", data_c$results[index])) {
data_c$state[index] <- 2
next
}
if (grepl("E.co", data_c$results[index])) {
data_c$state[index] <- 2
next
}
if (grepl("KPN", data_c$results[index])) {
data_c$state[index] <- 3
next
}
if (grepl("^ND$", data_c$results[index])) {
data_c$state[index] <- 1
next
}
# Maintain current NA's (missing result) + Citrobacter species
else {
data_c$state[index] <- NA
}
}
# Order by patient index
data_c <- data_c[order(data_c$id),]
data_e <- data_c[!(data_c$id=="457" | data_c$id=="457.1" | data_c$id=="457.2"),]
# CUT OUT TIMES SINCE DISCHARGE
# Frequency table of pairs of consecutive states
states_summary <- statetable.msm(state, id, data=data_e)
Q <- matrix(NA,nrow=3,ncol=3)
# Simple transition matrix (frequency based)
for(i in 1:dim(Q)[1]){
for(j in 1:dim(Q)[2]){
Q[i,j]<-as.matrix(states_summary)[i,j]/sum(as.matrix(states_summary)[i,])
}
}
## Model with no covariates (4 states)
model_4_s <- msm(formula = state ~ time, subject=id, data=data_e, qmatrix = Q, gen.inits = TRUE)
model_4_s
# An extra state considering Citrobacter could be added or states considering the genes instead species
plot.prevalence.msm(model_4_s, legend.pos=c(5,80), times=seq(1,368,1), timezero = 0)
Q[2,3] <- 0
Q[3,2] <- 0
## Model with no covariates (4 states)
model_4_s <- msm(formula = state ~ time, subject=id, data=data_e, qmatrix = Q, gen.inits = TRUE)
# An extra state considering Citrobacter could be added or states considering the genes instead species
plot.prevalence.msm(model_4_s, legend.pos=c(5,80), times=seq(1,368,1), timezero = 0)
data_e <- data_c[!(data_c$id=="457" | data_c$id=="457.1" | data_c$id=="457.2"),]
# CUT OUT TIMES SINCE DISCHARGE
# Frequency table of pairs of consecutive states
states_summary <- statetable.msm(state, id, data=data_c)
Q <- matrix(NA,nrow=3,ncol=3)
# Simple transition matrix (frequency based)
for(i in 1:dim(Q)[1]){
for(j in 1:dim(Q)[2]){
Q[i,j]<-as.matrix(states_summary)[i,j]/sum(as.matrix(states_summary)[i,])
}
}
data_e
data_e <- data_c[!(data_c$id=="457" | data_c$id=="457.1" | data_c$id=="457.2"),]
# CUT OUT TIMES SINCE DISCHARGE
# Frequency table of pairs of consecutive states
states_summary <- statetable.msm(state, id, data=data_c)
Q <- matrix(NA,nrow=3,ncol=3)
# Simple transition matrix (frequency based)
for(i in 1:dim(Q)[1]){
for(j in 1:dim(Q)[2]){
Q[i,j]<-as.matrix(states_summary)[i,j]/sum(as.matrix(states_summary)[i,])
}
}
Q[2,3] <- 0
Q[3,2] <- 0
## Model with no covariates (4 states)
model_4_s <- msm(formula = state ~ time, subject=id, data=data_c, qmatrix = Q, gen.inits = TRUE)
# An extra state considering Citrobacter could be added or states considering the genes instead species
plot.prevalence.msm(model_4_s, legend.pos=c(5,80), times=seq(1,368,1), timezero = 0)
data_plasmids <- data_c
for (index in 1:length(data_plasmids$results)){
if (grepl("OXA", data_plasmids$results[index]) && grepl("KPC", data_plasmids$results[index])){
data_plasmids$state[index] <- 4
next
}
if (grepl("^ND$", data_plasmids$results[index])){
data_plasmids$state[index] <- 1
next
}
if (grepl("OXA", data_plasmids$results[index])){
data_plasmids$state[index] <- 2
next
}
if (grepl("KPC", data_plasmids$results[index])) {
data_plasmids$state[index] <- 3
next
}
# Maintain current NA's (missing result)
else {
data_plasmids$state[index] <- NA
}
}
# Order by patient index
data_plasmids <- data_plasmids[order(data_plasmids$id),]
states_summary <- statetable.msm(state, id, data=data_plasmids)
Q <- matrix(NA,nrow=4,ncol=4)
# Simple transition matrix (frequency based)
for(i in 1:dim(Q)[1]){
for(j in 1:dim(Q)[2]){
Q[i,j]<-as.matrix(states_summary)[i,j]/sum(as.matrix(states_summary)[i,])
}
}
for (index in 1:length(data_plasmids$results)){
if (grepl("^ND$", data_plasmids$results[index])){
data_plasmids$state[index] <- 1
next
}
if (grepl("OXA", data_plasmids$results[index])){
data_plasmids$state[index] <- 2
next
}
if (grepl("KPC", data_plasmids$results[index])) {
data_plasmids$state[index] <- 3
next
}
# Maintain current NA's (missing result)
else {
data_plasmids$state[index] <- NA
}
}
# Order by patient index
data_plasmids <- data_plasmids[order(data_plasmids$id),]
states_summary <- statetable.msm(state, id, data=data_plasmids)
Q <- matrix(NA,nrow=3,ncol=3)
# Simple transition matrix (frequency based)
for(i in 1:dim(Q)[1]){
for(j in 1:dim(Q)[2]){
Q[i,j]<-as.matrix(states_summary)[i,j]/sum(as.matrix(states_summary)[i,])
}
}
model_4_p <- msm(formula = state ~ time, subject=id, data=data_plasmids, qmatrix = Q, gen.inits = TRUE)
model_4_p
sojourn.msm(model_4_p)
plot.prevalenc
plot.prevalence.msm(model_4_p, legend.pos=c(5,80), times=seq(1,368,1), timezero = 0)
data_c
data_c$antibiotics_90days
subset(x = data_c, select = c(data_c$id, data_c$antibiotics_90days))
data_c$id
data_c$antibiotics_90days
subset(x = data_c, select = c(id, antibiotics_90days))
unique(subset(x = data_c, select = c(id, antibiotics_90days)))
shiny::runApp('Documents/GitHub/SPHINX')
install.packages(ggvis)
install.packages("ggvis")
runApp('Documents/GitHub/SPHINX')
runApp('Documents/GitHub/SPHINX')
runApp('Documents/GitHub/SPHINX')
runApp('Documents/GitHub/SPHINX')
runApp('Documents/GitHub/SPHINX')
runApp('Documents/GitHub/SPHINX')
runApp('Documents/GitHub/SPHINX')
runApp('Documents/GitHub/SPHINX')
install.packages("dplyr")
install.packages("dplyr")
install.packages("RSQLite")
install.packages("dbplyr")
runApp('Documents/GitHub/SPHINX')
install.packages("dplyr")
shiny::runApp()
install.packages("dplyr")
shiny::runApp()
runApp()
install.packages("dplyr")
shiny::runApp()
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
update.packages(dplyr)
install.packages(c('shiny', 'ggvis', 'dplyr', 'RSQLite'))
install.packages(c("shiny", "ggvis", "dplyr", "RSQLite"))
install.packages(c("shiny", "ggvis", "dplyr", "RSQLite"))
install.packages(c("shiny", "ggvis", "dplyr", "RSQLite"))
install.packages(c("shiny", "ggvis", "dplyr", "RSQLite"))
shiny::runApp()
shiny::runApp()
